// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package lzval

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCodec creates a new instance of MockCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodec {
	mock := &MockCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCodec is an autogenerated mock type for the Codec type
type MockCodec struct {
	mock.Mock
}

type MockCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodec) EXPECT() *MockCodec_Expecter {
	return &MockCodec_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function for the type MockCodec
func (_mock *MockCodec) Decode(context1 context.Context, bytes []byte) (DecodeValue, error) {
	ret := _mock.Called(context1, bytes)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 DecodeValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (DecodeValue, error)); ok {
		return returnFunc(context1, bytes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) DecodeValue); ok {
		r0 = returnFunc(context1, bytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DecodeValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(context1, bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCodec_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCodec_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - context1 context.Context
//   - bytes []byte
func (_e *MockCodec_Expecter) Decode(context1 interface{}, bytes interface{}) *MockCodec_Decode_Call {
	return &MockCodec_Decode_Call{Call: _e.mock.On("Decode", context1, bytes)}
}

func (_c *MockCodec_Decode_Call) Run(run func(context1 context.Context, bytes []byte)) *MockCodec_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCodec_Decode_Call) Return(v DecodeValue, err error) *MockCodec_Decode_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockCodec_Decode_Call) RunAndReturn(run func(context1 context.Context, bytes []byte) (DecodeValue, error)) *MockCodec_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function for the type MockCodec
func (_mock *MockCodec) Encode(context1 context.Context, v any) ([]byte, error) {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) ([]byte, error)); ok {
		return returnFunc(context1, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) []byte); ok {
		r0 = returnFunc(context1, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(context1, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCodec_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockCodec_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - context1 context.Context
//   - v any
func (_e *MockCodec_Expecter) Encode(context1 interface{}, v interface{}) *MockCodec_Encode_Call {
	return &MockCodec_Encode_Call{Call: _e.mock.On("Encode", context1, v)}
}

func (_c *MockCodec_Encode_Call) Run(run func(context1 context.Context, v any)) *MockCodec_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCodec_Encode_Call) Return(bytes []byte, err error) *MockCodec_Encode_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCodec_Encode_Call) RunAndReturn(run func(context1 context.Context, v any) ([]byte, error)) *MockCodec_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoadable creates a new instance of MockLoadable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoadable[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoadable[T] {
	mock := &MockLoadable[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoadable is an autogenerated mock type for the Loadable type
type MockLoadable[T any] struct {
	mock.Mock
}

type MockLoadable_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockLoadable[T]) EXPECT() *MockLoadable_Expecter[T] {
	return &MockLoadable_Expecter[T]{mock: &_m.Mock}
}

// Load provides a mock function for the type MockLoadable
func (_mock *MockLoadable[T]) Load(context1 context.Context) (T, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLoadable_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockLoadable_Load_Call[T any] struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockLoadable_Expecter[T]) Load(context1 interface{}) *MockLoadable_Load_Call[T] {
	return &MockLoadable_Load_Call[T]{Call: _e.mock.On("Load", context1)}
}

func (_c *MockLoadable_Load_Call[T]) Run(run func(context1 context.Context)) *MockLoadable_Load_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoadable_Load_Call[T]) Return(v T, err error) *MockLoadable_Load_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockLoadable_Load_Call[T]) RunAndReturn(run func(context1 context.Context) (T, error)) *MockLoadable_Load_Call[T] {
	_c.Call.Return(run)
	return _c
}

// newMockreportable creates a new instance of mockreportable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockreportable(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockreportable {
	mock := &mockreportable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockreportable is an autogenerated mock type for the reportable type
type mockreportable struct {
	mock.Mock
}

type mockreportable_Expecter struct {
	mock *mock.Mock
}

func (_m *mockreportable) EXPECT() *mockreportable_Expecter {
	return &mockreportable_Expecter{mock: &_m.Mock}
}

// reportDirty provides a mock function for the type mockreportable
func (_mock *mockreportable) reportDirty() {
	_mock.Called()
	return
}

// mockreportable_reportDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'reportDirty'
type mockreportable_reportDirty_Call struct {
	*mock.Call
}

// reportDirty is a helper method to define mock.On call
func (_e *mockreportable_Expecter) reportDirty() *mockreportable_reportDirty_Call {
	return &mockreportable_reportDirty_Call{Call: _e.mock.On("reportDirty")}
}

func (_c *mockreportable_reportDirty_Call) Run(run func()) *mockreportable_reportDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockreportable_reportDirty_Call) Return() *mockreportable_reportDirty_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockreportable_reportDirty_Call) RunAndReturn(run func()) *mockreportable_reportDirty_Call {
	_c.Run(run)
	return _c
}
