// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package lzval

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCodec creates a new instance of MockCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodec {
	mock := &MockCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCodec is an autogenerated mock type for the Codec type
type MockCodec struct {
	mock.Mock
}

type MockCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodec) EXPECT() *MockCodec_Expecter {
	return &MockCodec_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function for the type MockCodec
func (_mock *MockCodec) Decode(bytes []byte) (DecodeValue, error) {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 DecodeValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (DecodeValue, error)); ok {
		return returnFunc(bytes)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) DecodeValue); ok {
		r0 = returnFunc(bytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DecodeValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCodec_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCodec_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - bytes []byte
func (_e *MockCodec_Expecter) Decode(bytes interface{}) *MockCodec_Decode_Call {
	return &MockCodec_Decode_Call{Call: _e.mock.On("Decode", bytes)}
}

func (_c *MockCodec_Decode_Call) Run(run func(bytes []byte)) *MockCodec_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCodec_Decode_Call) Return(decodeValue DecodeValue, err error) *MockCodec_Decode_Call {
	_c.Call.Return(decodeValue, err)
	return _c
}

func (_c *MockCodec_Decode_Call) RunAndReturn(run func(bytes []byte) (DecodeValue, error)) *MockCodec_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function for the type MockCodec
func (_mock *MockCodec) Encode(v any) ([]byte, error) {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) ([]byte, error)); ok {
		return returnFunc(v)
	}
	if returnFunc, ok := ret.Get(0).(func(any) []byte); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCodec_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockCodec_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - v any
func (_e *MockCodec_Expecter) Encode(v interface{}) *MockCodec_Encode_Call {
	return &MockCodec_Encode_Call{Call: _e.mock.On("Encode", v)}
}

func (_c *MockCodec_Encode_Call) Run(run func(v any)) *MockCodec_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCodec_Encode_Call) Return(bytes []byte, err error) *MockCodec_Encode_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCodec_Encode_Call) RunAndReturn(run func(v any) ([]byte, error)) *MockCodec_Encode_Call {
	_c.Call.Return(run)
	return _c
}
